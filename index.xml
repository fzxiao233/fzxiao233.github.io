<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FZxiao 的大仓库</title><link>https://fzxiao233.github.io/hugo-blog/</link><description>Recent content on FZxiao 的大仓库</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 10 Oct 2020 19:46:46 +0800</lastBuildDate><atom:link href="https://fzxiao233.github.io/hugo-blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Leetcode 27 移除元素</title><link>https://fzxiao233.github.io/hugo-blog/posts/leetcode-27/</link><pubDate>Sat, 10 Oct 2020 19:46:46 +0800</pubDate><guid>https://fzxiao233.github.io/hugo-blog/posts/leetcode-27/</guid><description>&lt;h2 id="题目">题目&lt;/h2>
&lt;p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。&lt;/p>
&lt;p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。&lt;/p>
&lt;p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。&lt;/p>
&lt;h2 id="解析">解析&lt;/h2>
&lt;p>先来分享一下题目要求&lt;/p>
&lt;ul>
&lt;li>通过 原地修改数组 移除所给值&lt;/li>
&lt;li>元素顺序可改变&lt;/li>
&lt;li>返回数组长度 注：其实数组也是会被判定的，因为传入的是数组的引用&lt;/li>
&lt;/ul>
&lt;h3 id="第一解">第一解&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-Golang" data-lang="Golang">&lt;span class="kd">func&lt;/span> &lt;span class="nf">removeElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">:=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">nums&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一次写下了这个解法，遍历数组，如果是需要移除的数，就移除，最后返回数组长度&lt;/p>
&lt;p>毫无疑问，这是个错解&lt;/p>
&lt;p>因为没有考虑移除元素后，指针i已经+1，导致漏过了中间的元素&lt;/p>
&lt;h3 id="第二解">第二解&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-Golang" data-lang="Golang">&lt;span class="kd">func&lt;/span> &lt;span class="nf">removeElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">:=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">j&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>仔细阅读题目后，发现上一题还犯了一个错误：没有&lt;strong>原地修改数组&lt;/strong>&lt;/p>
&lt;p>因为其实使用 append 的过程中，是利用了 go 中 slice 的特性，创建了两个新数组然后合并&lt;/p>
&lt;p>那么，如果要原地修改数组的话，无疑是一个提示： &lt;strong>双指针&lt;/strong>&lt;/p>
&lt;p>这里定义两个指针 i, j 用快指针 i 来&lt;strong>遍历数组&lt;/strong>&lt;/p>
&lt;p>若得到的值并不是所给的需要移除的值，就将 i 处的元素放至 j 处，然后让慢指针 j 自增 1&lt;/p>
&lt;p>核心思想就在于 指针j 其实是在&lt;strong>创建&lt;/strong>答案所需的数组，只不过是覆盖原有元素来实现的&lt;/p>
&lt;p>那么当 指针i 遍历了整个数组后， 不需要删除的元素已经随着 指针j 创建好了， 而 j 正是数组的长度， 将其返回即可&lt;/p>
&lt;h3 id="第三解">第三解&lt;/h3>
&lt;p>LeetCode 官方还给出了另一种方法，考虑数组[1,2,3,3] 要移除的元素1&lt;/p>
&lt;p>因为移除的元素很少，但上面一个正解仍旧需要复制所有的非移除元素&lt;/p>
&lt;p>第三解解决了这个问题&lt;/p>
&lt;p>通过遍历数组，将最后一个元素放到当前需要元素上（效果等同于数组长度-1） 那么就能减少不需要移除的元素的复制&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-Golang" data-lang="Golang"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">removeElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">j&lt;/span>&lt;span class="o">--&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">j&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;ul>
&lt;li>类似原地修改数组的题目，都可以考虑用&lt;strong>双指针&lt;/strong>法&lt;/li>
&lt;li>原地移除数组元素不是不可实现的，可以考虑用文中的 用最后一个元素替换需要移除的元素 或 用双指针重写整个数组来实现&lt;/li>
&lt;/ul></description></item><item><title>Hello Hugo!</title><link>https://fzxiao233.github.io/hugo-blog/posts/hello_hugo/</link><pubDate>Sat, 10 Oct 2020 17:03:53 +0800</pubDate><guid>https://fzxiao233.github.io/hugo-blog/posts/hello_hugo/</guid><description>&lt;blockquote>
&lt;p>人活着就在于折腾&lt;/p>
&lt;/blockquote>
&lt;p>我总是把 blog 系统折腾来折腾去，经历了 Wp -&amp;gt; Hexo -&amp;gt; Jeklly -&amp;gt; Hugo&lt;/p>
&lt;p>但是文章却没好好写几篇wwww，这次换到了 Hugo 应该折腾到头了吧&lt;/p>
&lt;p>步入了大一，给自己一个从头开始吧（各种方面的）&lt;/p>
&lt;p>于是乎，这里既是新家啦，技术，日常什么的，就往这里放了吧(不知道又能坚持多久)&lt;/p>
&lt;p>总之&lt;/p>
&lt;blockquote>
&lt;p>Do what you love and love what you do.&lt;/p>
&lt;/blockquote>
&lt;p>让我们共勉吧&lt;/p></description></item></channel></rss>